
<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        route
* GENERATION DATE:  19.07.2018
* CLASS FILE:       C:\wamp64\www\genera_clase/generated_classes/class.route.php
* FOR MYSQL TABLE:  route
* FOR MYSQL DB:     carrillo_dbaurora
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
include_once("../resources/class.aurora.php");
// **********************
// CLASS DECLARATION
// **********************

class route
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************


public $listID;   // (normal Attribute)
public $timeCreated;   // (normal Attribute)
public $timeModified;   // (normal Attribute)
public $editSequence;   // (normal Attribute)
public $name;   // (normal Attribute)
public $isActive;   // (normal Attribute)
public $description;   // (normal Attribute)
public $address;   // (normal Attribute)
public $phone;   // (normal Attribute)
public $email;   // (normal Attribute)
public $tipoId;   // (normal Attribute)
public $numeroId;   // (normal Attribute)
public $customField1;   // (normal Attribute)
public $customField2;   // (normal Attribute)
public $customField3;   // (normal Attribute)
public $status;   // (normal Attribute)

var $db; // Instance of class db
var $estado; 


// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$this->db = conecta_SYNC();
}

function __destruct()
{


}
public function initialize($entity = null, $options = array())
    {
     $listID= new Text("listID");
$listID->setLabel("listID");
$listID->setFilters(array('striptags', 'strig'));
$listID->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($listID);

$timeCreated= new Date("timeCreated");
$timeCreated->setLabel("timeCreated");
$timeCreated->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($timeCreated);

$timeModified= new Date("timeModified");
$timeModified->setLabel("timeModified");
$timeModified->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($timeModified);

$editSequence= new Numeric("editSequence");
$editSequence->setLabel("editSequence");
$editSequence->setFilters(array('int'));
$editSequence->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($editSequence);

$name= new Text("name");
$name->setLabel("name");
$name->setFilters(array('striptags', 'strig'));
$name->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($name);

$description= new Text("description");
$description->setLabel("description");
$description->setFilters(array('striptags', 'strig'));
$description->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($description);

$address= new Text("address");
$address->setLabel("address");
$address->setFilters(array('striptags', 'strig'));
$address->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($address);

$phone= new Text("phone");
$phone->setLabel("phone");
$phone->setFilters(array('striptags', 'strig'));
$phone->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($phone);

$email= new Text("email");
$email->setLabel("email");
$email->setFilters(array('striptags', 'strig'));
$email->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($email);

$tipoId= new Text("tipoId");
$tipoId->setLabel("tipoId");
$tipoId->setFilters(array('striptags', 'strig'));
$tipoId->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($tipoId);

$numeroId= new Text("numeroId");
$numeroId->setLabel("numeroId");
$numeroId->setFilters(array('striptags', 'strig'));
$numeroId->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($numeroId);

$customField1= new Text("customField1");
$customField1->setLabel("customField1");
$customField1->setFilters(array('striptags', 'strig'));
$customField1->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($customField1);

$customField2= new Text("customField2");
$customField2->setLabel("customField2");
$customField2->setFilters(array('striptags', 'strig'));
$customField2->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($customField2);

$customField3= new Text("customField3");
$customField3->setLabel("customField3");
$customField3->setFilters(array('striptags', 'strig'));
$customField3->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($customField3);

$status= new Text("status");
$status->setLabel("status");
$status->setFilters(array('striptags', 'strig'));
$status->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($status);


    }
    
function genJson_route($jsonString)
{
$_SESSION['route']['listID'] = $jsonString->listID;
$_SESSION['route']['timeCreated'] = $jsonString->timeCreated;
$_SESSION['route']['timeModified'] = $jsonString->timeModified;
$_SESSION['route']['editSequence'] = $jsonString->editSequence;
$_SESSION['route']['name'] = $jsonString->name;
$_SESSION['route']['isActive'] = $jsonString->isActive;
$_SESSION['route']['description'] = $jsonString->description;
$_SESSION['route']['address'] = $jsonString->address;
$_SESSION['route']['phone'] = $jsonString->phone;
$_SESSION['route']['email'] = $jsonString->email;
$_SESSION['route']['tipoId'] = $jsonString->tipoId;
$_SESSION['route']['numeroId'] = $jsonString->numeroId;
$_SESSION['route']['customField1'] = $jsonString->customField1;
$_SESSION['route']['customField2'] = $jsonString->customField2;
$_SESSION['route']['customField3'] = $jsonString->customField3;
$_SESSION['route']['status'] = $jsonString->status;

}

function genInsert_route()
{
$this->setlistID($_SESSION['route']['listID']);
$this->settimeCreated($_SESSION['route']['timeCreated']);
$this->settimeModified($_SESSION['route']['timeModified']);
$this->seteditSequence($_SESSION['route']['editSequence']);
$this->setname($_SESSION['route']['name']);
$this->setisActive($_SESSION['route']['isActive']);
$this->setdescription($_SESSION['route']['description']);
$this->setaddress($_SESSION['route']['address']);
$this->setphone($_SESSION['route']['phone']);
$this->setemail($_SESSION['route']['email']);
$this->settipoId($_SESSION['route']['tipoId']);
$this->setnumeroId($_SESSION['route']['numeroId']);
$this->setcustomField1($_SESSION['route']['customField1']);
$this->setcustomField2($_SESSION['route']['customField2']);
$this->setcustomField3($_SESSION['route']['customField3']);
$this->setstatus($_SESSION['route']['status']);

}

function genLimpia_route()
{
$_SESSION['route']['listID'] = ' ';
$_SESSION['route']['timeCreated'] = ' ';
$_SESSION['route']['timeModified'] = ' ';
$_SESSION['route']['editSequence'] = ' ';
$_SESSION['route']['name'] = ' ';
$_SESSION['route']['isActive'] = ' ';
$_SESSION['route']['description'] = ' ';
$_SESSION['route']['address'] = ' ';
$_SESSION['route']['phone'] = ' ';
$_SESSION['route']['email'] = ' ';
$_SESSION['route']['tipoId'] = ' ';
$_SESSION['route']['numeroId'] = ' ';
$_SESSION['route']['customField1'] = ' ';
$_SESSION['route']['customField2'] = ' ';
$_SESSION['route']['customField3'] = ' ';
$_SESSION['route']['status'] = ' ';

}

function gentraverse_route($node)
{
$node->getElementsByTagName('listID')->item(0) == NULL ? $_SESSION['route']['listID'] = ' ' : $_SESSION['route']['listID'] = $node->getElementsByTagName('listID')->item(0)->nodeValue;
$node->getElementsByTagName('timeCreated')->item(0) == NULL ? $_SESSION['route']['timeCreated'] = '2010-08-10' : $_SESSION['route']['timeCreated'] = $node->getElementsByTagName('timeCreated')->item(0)->nodeValue;
$node->getElementsByTagName('timeModified')->item(0) == NULL ? $_SESSION['route']['timeModified'] = '2010-08-10' : $_SESSION['route']['timeModified'] = $node->getElementsByTagName('timeModified')->item(0)->nodeValue;
$node->getElementsByTagName('editSequence')->item(0) == NULL ? $_SESSION['route']['editSequence'] = 0 : $_SESSION['route']['editSequence'] = $node->getElementsByTagName('editSequence')->item(0)->nodeValue;
$node->getElementsByTagName('name')->item(0) == NULL ? $_SESSION['route']['name'] = ' ' : $_SESSION['route']['name'] = $node->getElementsByTagName('name')->item(0)->nodeValue;
$node->getElementsByTagName('isActive')->item(0) == NULL ? $_SESSION['route']['isActive'] =  : $_SESSION['route']['isActive'] = $node->getElementsByTagName('isActive')->item(0)->nodeValue;
$node->getElementsByTagName('description')->item(0) == NULL ? $_SESSION['route']['description'] = ' ' : $_SESSION['route']['description'] = $node->getElementsByTagName('description')->item(0)->nodeValue;
$node->getElementsByTagName('address')->item(0) == NULL ? $_SESSION['route']['address'] = ' ' : $_SESSION['route']['address'] = $node->getElementsByTagName('address')->item(0)->nodeValue;
$node->getElementsByTagName('phone')->item(0) == NULL ? $_SESSION['route']['phone'] = ' ' : $_SESSION['route']['phone'] = $node->getElementsByTagName('phone')->item(0)->nodeValue;
$node->getElementsByTagName('email')->item(0) == NULL ? $_SESSION['route']['email'] = ' ' : $_SESSION['route']['email'] = $node->getElementsByTagName('email')->item(0)->nodeValue;
$node->getElementsByTagName('tipoId')->item(0) == NULL ? $_SESSION['route']['tipoId'] = ' ' : $_SESSION['route']['tipoId'] = $node->getElementsByTagName('tipoId')->item(0)->nodeValue;
$node->getElementsByTagName('numeroId')->item(0) == NULL ? $_SESSION['route']['numeroId'] = ' ' : $_SESSION['route']['numeroId'] = $node->getElementsByTagName('numeroId')->item(0)->nodeValue;
$node->getElementsByTagName('customField1')->item(0) == NULL ? $_SESSION['route']['customField1'] = ' ' : $_SESSION['route']['customField1'] = $node->getElementsByTagName('customField1')->item(0)->nodeValue;
$node->getElementsByTagName('customField2')->item(0) == NULL ? $_SESSION['route']['customField2'] = ' ' : $_SESSION['route']['customField2'] = $node->getElementsByTagName('customField2')->item(0)->nodeValue;
$node->getElementsByTagName('customField3')->item(0) == NULL ? $_SESSION['route']['customField3'] = ' ' : $_SESSION['route']['customField3'] = $node->getElementsByTagName('customField3')->item(0)->nodeValue;
$node->getElementsByTagName('status')->item(0) == NULL ? $_SESSION['route']['status'] = ' ' : $_SESSION['route']['status'] = $node->getElementsByTagName('status')->item(0)->nodeValue;

}

function adiciona_route()
{
        $this->estado = 'ERR';
	$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
        $sql = 'INSERT INTO route (  listID, timeCreated, timeModified, editSequence, name, isActive, description, address, phone, email, tipoId, numeroId, customField1, customField2, customField3, status) VALUES ( :listID, :timeCreated, :timeModified, :editSequence, :name, :isActive, :description, :address, :phone, :email, :tipoId, :numeroId, :customField1, :customField2, :customField3, :status)';
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':listID', $_SESSION['route']['listID'] );
	$stmt->bindParam(':timeCreated', $_SESSION['route']['timeCreated'] );
	$stmt->bindParam(':timeModified', $_SESSION['route']['timeModified'] );
	$stmt->bindParam(':editSequence', $_SESSION['route']['editSequence'] );
	$stmt->bindParam(':name', $_SESSION['route']['name'] );
	$stmt->bindParam(':isActive', $_SESSION['route']['isActive'] );
	$stmt->bindParam(':description', $_SESSION['route']['description'] );
	$stmt->bindParam(':address', $_SESSION['route']['address'] );
	$stmt->bindParam(':phone', $_SESSION['route']['phone'] );
	$stmt->bindParam(':email', $_SESSION['route']['email'] );
	$stmt->bindParam(':tipoId', $_SESSION['route']['tipoId'] );
	$stmt->bindParam(':numeroId', $_SESSION['route']['numeroId'] );
	$stmt->bindParam(':customField1', $_SESSION['route']['customField1'] );
	$stmt->bindParam(':customField2', $_SESSION['route']['customField2'] );
	$stmt->bindParam(':customField3', $_SESSION['route']['customField3'] );
	$stmt->bindParam(':status', $_SESSION['route']['status'] );
	$stmt->execute();
        } catch(PDOException $e) {
            echo $e->getMessage();
        }    
}

function quitaslashes_route()
{
         $_SESSION['route']['listID'] = htmlspecialchars(strip_tags($_SESSION['route']['listID']));
$_SESSION['route']['timeCreated'] = htmlspecialchars(strip_tags($_SESSION['route']['timeCreated']));
$_SESSION['route']['timeModified'] = htmlspecialchars(strip_tags($_SESSION['route']['timeModified']));
$_SESSION['route']['editSequence'] = htmlspecialchars(strip_tags($_SESSION['route']['editSequence']));
$_SESSION['route']['name'] = htmlspecialchars(strip_tags($_SESSION['route']['name']));
$_SESSION['route']['isActive'] = htmlspecialchars(strip_tags($_SESSION['route']['isActive']));
$_SESSION['route']['description'] = htmlspecialchars(strip_tags($_SESSION['route']['description']));
$_SESSION['route']['address'] = htmlspecialchars(strip_tags($_SESSION['route']['address']));
$_SESSION['route']['phone'] = htmlspecialchars(strip_tags($_SESSION['route']['phone']));
$_SESSION['route']['email'] = htmlspecialchars(strip_tags($_SESSION['route']['email']));
$_SESSION['route']['tipoId'] = htmlspecialchars(strip_tags($_SESSION['route']['tipoId']));
$_SESSION['route']['numeroId'] = htmlspecialchars(strip_tags($_SESSION['route']['numeroId']));
$_SESSION['route']['customField1'] = htmlspecialchars(strip_tags($_SESSION['route']['customField1']));
$_SESSION['route']['customField2'] = htmlspecialchars(strip_tags($_SESSION['route']['customField2']));
$_SESSION['route']['customField3'] = htmlspecialchars(strip_tags($_SESSION['route']['customField3']));
$_SESSION['route']['status'] = htmlspecialchars(strip_tags($_SESSION['route']['status']));

 
    }
    


// **********************
// GETTER METHODS
// **********************


function getlistID()
{
return $this->listID;
}

function gettimeCreated()
{
return $this->timeCreated;
}

function gettimeModified()
{
return $this->timeModified;
}

function geteditSequence()
{
return $this->editSequence;
}

function getname()
{
return $this->name;
}

function getisActive()
{
return $this->isActive;
}

function getdescription()
{
return $this->description;
}

function getaddress()
{
return $this->address;
}

function getphone()
{
return $this->phone;
}

function getemail()
{
return $this->email;
}

function gettipoId()
{
return $this->tipoId;
}

function getnumeroId()
{
return $this->numeroId;
}

function getcustomField1()
{
return $this->customField1;
}

function getcustomField2()
{
return $this->customField2;
}

function getcustomField3()
{
return $this->customField3;
}

function getstatus()
{
return $this->status;
}

// **********************
// SETTER METHODS
// **********************


function setlistID($val)
{
$this->listID =  $val;
}

function settimeCreated($val)
{
$this->timeCreated =  $val;
}

function settimeModified($val)
{
$this->timeModified =  $val;
}

function seteditSequence($val)
{
$this->editSequence =  $val;
}

function setname($val)
{
$this->name =  $val;
}

function setisActive($val)
{
$this->isActive =  $val;
}

function setdescription($val)
{
$this->description =  $val;
}

function setaddress($val)
{
$this->address =  $val;
}

function setphone($val)
{
$this->phone =  $val;
}

function setemail($val)
{
$this->email =  $val;
}

function settipoId($val)
{
$this->tipoId =  $val;
}

function setnumeroId($val)
{
$this->numeroId =  $val;
}

function setcustomField1($val)
{
$this->customField1 =  $val;
}

function setcustomField2($val)
{
$this->customField2 =  $val;
}

function setcustomField3($val)
{
$this->customField3 =  $val;
}

function setstatus($val)
{
$this->status =  $val;
}

// ************************************************************************************
// SELECT busca igual en el campo estado retorna OK si existe el registro
//          retorna actualiza si es el mismo registro y tambien carga en la instancia
//          los valores de la lectura
// *************************************************************************************

    function buscaIgual_route() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['route']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetch(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                if ($registro['TxnID'] === $_SESSION['route']['TxnID']) {
                $this->estado = 'ACTUALIZA';
                }
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// ************************************************************************************
// SELECT dependiendo de las condiones recibidas desde el programa llamado se parsea
//          el archivo json para cargar las comparaciones y tambien los nombres de las variables
//          para una lectura de todos los registros que cumplan la condicion
// *************************************************************************************

    function leetodos_route() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['route']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetchAll(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                $this->estado = 'TODOS';
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// **********************
// SELECT METHOD / LOAD
// **********************

function select_route()
{

$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	try {
$sql = 'SELECT * FROM route WHERE ListID = :clave'; 
$stmt = $this->db->prepare($sql);
    $stmt->bindParam(":clave", $_SESSION['route']['TxnID']);
        $stmt->execute();
	$registro = $stmt->fetch(PDO::FETCH_ASSOC);
	if ( ! $registro) {
		$this->estado = 'OK';
		return $this->estado;
	} else {
                
		if ($registro['TxnID'] === $_SESSION['invoice']['TxnID']) {
                    $this->estado = 'ACTUALIZA';
                    }
                    }
            
                } catch(PDOException $e) {
                    echo $e->getMessage();
                }
                
		$this->listID = $registro['listID'];

		$this->timeCreated = $registro['timeCreated'];

		$this->timeModified = $registro['timeModified'];

		$this->editSequence = $registro['editSequence'];

		$this->name = $registro['name'];

		$this->isActive = $registro['isActive'];

		$this->description = $registro['description'];

		$this->address = $registro['address'];

		$this->phone = $registro['phone'];

		$this->email = $registro['email'];

		$this->tipoId = $registro['tipoId'];

		$this->numeroId = $registro['numeroId'];

		$this->customField1 = $registro['customField1'];

		$this->customField2 = $registro['customField2'];

		$this->customField3 = $registro['customField3'];

		$this->status = $registro['status'];


}

// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_route()
{

                unset($_SESSION['route']['listID']);
unset($_SESSION['route']['timeCreated']);
unset($_SESSION['route']['timeModified']);
unset($_SESSION['route']['editSequence']);
unset($_SESSION['route']['name']);
unset($_SESSION['route']['isActive']);
unset($_SESSION['route']['description']);
unset($_SESSION['route']['address']);
unset($_SESSION['route']['phone']);
unset($_SESSION['route']['email']);
unset($_SESSION['route']['tipoId']);
unset($_SESSION['route']['numeroId']);
unset($_SESSION['route']['customField1']);
unset($_SESSION['route']['customField2']);
unset($_SESSION['route']['customField3']);
unset($_SESSION['route']['status']);


            }

// **********************
// DELETE
// **********************

function delete_route($id)
{


}

// **********************
// UPDATE
// **********************

function update_route()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE route SET listID=$this->listID, timeCreated=$this->timeCreated, timeModified=$this->timeModified, editSequence=$this->editSequence, name=$this->name, isActive=$this->isActive, description=$this->description, address=$this->address, phone=$this->phone, email=$this->email, tipoId=$this->tipoId, numeroId=$this->numeroId, customField1=$this->customField1, customField2=$this->customField2, customField3=$this->customField3, status=$this->status, WHERE ListID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

// ---------------------------------------------------------
// Actualiza tabla con la opcion del PDO bindparam
// ---------------------------------------------------------

function actualiza_route()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE route SET listID=:listID, timeCreated=:timeCreated, timeModified=:timeModified, editSequence=:editSequence, name=:name, isActive=:isActive, description=:description, address=:address, phone=:phone, email=:email, tipoId=:tipoId, numeroId=:numeroId, customField1=:customField1, customField2=:customField2, customField3=:customField3, status=:status, WHERE ListID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':listID', $_SESSION['route']['listID'] );
	$stmt->bindParam(':timeCreated', $_SESSION['route']['timeCreated'] );
	$stmt->bindParam(':timeModified', $_SESSION['route']['timeModified'] );
	$stmt->bindParam(':editSequence', $_SESSION['route']['editSequence'] );
	$stmt->bindParam(':name', $_SESSION['route']['name'] );
	$stmt->bindParam(':isActive', $_SESSION['route']['isActive'] );
	$stmt->bindParam(':description', $_SESSION['route']['description'] );
	$stmt->bindParam(':address', $_SESSION['route']['address'] );
	$stmt->bindParam(':phone', $_SESSION['route']['phone'] );
	$stmt->bindParam(':email', $_SESSION['route']['email'] );
	$stmt->bindParam(':tipoId', $_SESSION['route']['tipoId'] );
	$stmt->bindParam(':numeroId', $_SESSION['route']['numeroId'] );
	$stmt->bindParam(':customField1', $_SESSION['route']['customField1'] );
	$stmt->bindParam(':customField2', $_SESSION['route']['customField2'] );
	$stmt->bindParam(':customField3', $_SESSION['route']['customField3'] );
	$stmt->bindParam(':status', $_SESSION['route']['status'] );
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

}
?>
<!-- end of generated class -->
