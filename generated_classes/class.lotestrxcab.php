
<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        lotestrxcab
* GENERATION DATE:  01.08.2018
* CLASS FILE:       C:\wamp64\www\genera_clase/generated_classes/class.lotestrxcab.php
* FOR MYSQL TABLE:  lotestrxcab
* FOR MYSQL DB:     carrillo_dbaurora
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
include_once("../resources/class.aurora.php");
// **********************
// CLASS DECLARATION
// **********************

class lotestrxcab
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************


public $TxnID;   // (normal Attribute)
public $TimeCreated;   // (normal Attribute)
public $TimeModified;   // (normal Attribute)
public $EditSequence;   // (normal Attribute)
public $TxnDate;   // (normal Attribute)
public $RefNumber;   // (normal Attribute)
public $OrigenID;   // (normal Attribute)
public $DestinoID;   // (normal Attribute)
public $VehicleID;   // (normal Attribute)
public $RouteID;   // (normal Attribute)
public $DriverID;   // (normal Attribute)
public $Responsable;   // (normal Attribute)
public $Status;   // (normal Attribute)
public $Estado;   // (normal Attribute)

var $db; // Instance of class db
var $estado; 


// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$this->db = conecta_SYNC();
}

function __destruct()
{


}
public function initialize($entity = null, $options = array())
    {
     $TimeCreated= new Date("TimeCreated");
$TimeCreated->setLabel("TimeCreated");
$TimeCreated->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($TimeCreated);

$TimeModified= new Date("TimeModified");
$TimeModified->setLabel("TimeModified");
$TimeModified->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($TimeModified);

$EditSequence= new Numeric("EditSequence");
$EditSequence->setLabel("EditSequence");
$EditSequence->setFilters(array('int'));
$EditSequence->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($EditSequence);

$TxnDate= new Date("TxnDate");
$TxnDate->setLabel("TxnDate");
$TxnDate->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($TxnDate);

$VehicleID= new Text("VehicleID");
$VehicleID->setLabel("VehicleID");
$VehicleID->setFilters(array('striptags', 'strig'));
$VehicleID->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($VehicleID);

$RouteID= new Text("RouteID");
$RouteID->setLabel("RouteID");
$RouteID->setFilters(array('striptags', 'strig'));
$RouteID->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($RouteID);

$Status= new Text("Status");
$Status->setLabel("Status");
$Status->setFilters(array('striptags', 'strig'));
$Status->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($Status);

$Estado= new Text("Estado");
$Estado->setLabel("Estado");
$Estado->setFilters(array('striptags', 'strig'));
$Estado->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($Estado);


    }
    
function genJson_lotestrxcab($jsonString)
{
$_SESSION['lotestrxcab']['TxnID'] = $jsonString->TxnID;
$_SESSION['lotestrxcab']['TimeCreated'] = $jsonString->TimeCreated;
$_SESSION['lotestrxcab']['TimeModified'] = $jsonString->TimeModified;
$_SESSION['lotestrxcab']['EditSequence'] = $jsonString->EditSequence;
$_SESSION['lotestrxcab']['TxnDate'] = $jsonString->TxnDate;
$_SESSION['lotestrxcab']['RefNumber'] = $jsonString->RefNumber;
$_SESSION['lotestrxcab']['OrigenID'] = $jsonString->OrigenID;
$_SESSION['lotestrxcab']['DestinoID'] = $jsonString->DestinoID;
$_SESSION['lotestrxcab']['VehicleID'] = $jsonString->VehicleID;
$_SESSION['lotestrxcab']['RouteID'] = $jsonString->RouteID;
$_SESSION['lotestrxcab']['DriverID'] = $jsonString->DriverID;
$_SESSION['lotestrxcab']['Responsable'] = $jsonString->Responsable;
$_SESSION['lotestrxcab']['Status'] = $jsonString->Status;
$_SESSION['lotestrxcab']['Estado'] = $jsonString->Estado;

}

function genInsert_lotestrxcab()
{
$this->setTxnID($_SESSION['lotestrxcab']['TxnID']);
$this->setTimeCreated($_SESSION['lotestrxcab']['TimeCreated']);
$this->setTimeModified($_SESSION['lotestrxcab']['TimeModified']);
$this->setEditSequence($_SESSION['lotestrxcab']['EditSequence']);
$this->setTxnDate($_SESSION['lotestrxcab']['TxnDate']);
$this->setRefNumber($_SESSION['lotestrxcab']['RefNumber']);
$this->setOrigenID($_SESSION['lotestrxcab']['OrigenID']);
$this->setDestinoID($_SESSION['lotestrxcab']['DestinoID']);
$this->setVehicleID($_SESSION['lotestrxcab']['VehicleID']);
$this->setRouteID($_SESSION['lotestrxcab']['RouteID']);
$this->setDriverID($_SESSION['lotestrxcab']['DriverID']);
$this->setResponsable($_SESSION['lotestrxcab']['Responsable']);
$this->setStatus($_SESSION['lotestrxcab']['Status']);
$this->setEstado($_SESSION['lotestrxcab']['Estado']);

}

function genLimpia_lotestrxcab()
{
$_SESSION['lotestrxcab']['TxnID'] = ' ';
$_SESSION['lotestrxcab']['TimeCreated'] = ' ';
$_SESSION['lotestrxcab']['TimeModified'] = ' ';
$_SESSION['lotestrxcab']['EditSequence'] = ' ';
$_SESSION['lotestrxcab']['TxnDate'] = ' ';
$_SESSION['lotestrxcab']['RefNumber'] = ' ';
$_SESSION['lotestrxcab']['OrigenID'] = ' ';
$_SESSION['lotestrxcab']['DestinoID'] = ' ';
$_SESSION['lotestrxcab']['VehicleID'] = ' ';
$_SESSION['lotestrxcab']['RouteID'] = ' ';
$_SESSION['lotestrxcab']['DriverID'] = ' ';
$_SESSION['lotestrxcab']['Responsable'] = ' ';
$_SESSION['lotestrxcab']['Status'] = ' ';
$_SESSION['lotestrxcab']['Estado'] = ' ';

}

function gentraverse_lotestrxcab($node)
{
$node->getElementsByTagName('TxnID')->item(0) == NULL ? $_SESSION['lotestrxcab']['TxnID'] =  : $_SESSION['lotestrxcab']['TxnID'] = $node->getElementsByTagName('TxnID')->item(0)->nodeValue;
$node->getElementsByTagName('TimeCreated')->item(0) == NULL ? $_SESSION['lotestrxcab']['TimeCreated'] = '2010-08-10' : $_SESSION['lotestrxcab']['TimeCreated'] = $node->getElementsByTagName('TimeCreated')->item(0)->nodeValue;
$node->getElementsByTagName('TimeModified')->item(0) == NULL ? $_SESSION['lotestrxcab']['TimeModified'] = '2010-08-10' : $_SESSION['lotestrxcab']['TimeModified'] = $node->getElementsByTagName('TimeModified')->item(0)->nodeValue;
$node->getElementsByTagName('EditSequence')->item(0) == NULL ? $_SESSION['lotestrxcab']['EditSequence'] = 0 : $_SESSION['lotestrxcab']['EditSequence'] = $node->getElementsByTagName('EditSequence')->item(0)->nodeValue;
$node->getElementsByTagName('TxnDate')->item(0) == NULL ? $_SESSION['lotestrxcab']['TxnDate'] = '2010-08-10' : $_SESSION['lotestrxcab']['TxnDate'] = $node->getElementsByTagName('TxnDate')->item(0)->nodeValue;
$node->getElementsByTagName('RefNumber')->item(0) == NULL ? $_SESSION['lotestrxcab']['RefNumber'] =  : $_SESSION['lotestrxcab']['RefNumber'] = $node->getElementsByTagName('RefNumber')->item(0)->nodeValue;
$node->getElementsByTagName('OrigenID')->item(0) == NULL ? $_SESSION['lotestrxcab']['OrigenID'] =  : $_SESSION['lotestrxcab']['OrigenID'] = $node->getElementsByTagName('OrigenID')->item(0)->nodeValue;
$node->getElementsByTagName('DestinoID')->item(0) == NULL ? $_SESSION['lotestrxcab']['DestinoID'] =  : $_SESSION['lotestrxcab']['DestinoID'] = $node->getElementsByTagName('DestinoID')->item(0)->nodeValue;
$node->getElementsByTagName('VehicleID')->item(0) == NULL ? $_SESSION['lotestrxcab']['VehicleID'] = ' ' : $_SESSION['lotestrxcab']['VehicleID'] = $node->getElementsByTagName('VehicleID')->item(0)->nodeValue;
$node->getElementsByTagName('RouteID')->item(0) == NULL ? $_SESSION['lotestrxcab']['RouteID'] = ' ' : $_SESSION['lotestrxcab']['RouteID'] = $node->getElementsByTagName('RouteID')->item(0)->nodeValue;
$node->getElementsByTagName('DriverID')->item(0) == NULL ? $_SESSION['lotestrxcab']['DriverID'] =  : $_SESSION['lotestrxcab']['DriverID'] = $node->getElementsByTagName('DriverID')->item(0)->nodeValue;
$node->getElementsByTagName('Responsable')->item(0) == NULL ? $_SESSION['lotestrxcab']['Responsable'] =  : $_SESSION['lotestrxcab']['Responsable'] = $node->getElementsByTagName('Responsable')->item(0)->nodeValue;
$node->getElementsByTagName('Status')->item(0) == NULL ? $_SESSION['lotestrxcab']['Status'] = ' ' : $_SESSION['lotestrxcab']['Status'] = $node->getElementsByTagName('Status')->item(0)->nodeValue;
$node->getElementsByTagName('Estado')->item(0) == NULL ? $_SESSION['lotestrxcab']['Estado'] = ' ' : $_SESSION['lotestrxcab']['Estado'] = $node->getElementsByTagName('Estado')->item(0)->nodeValue;

}

function adiciona_lotestrxcab()
{
        $this->estado = 'ERR';
	$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
        $sql = 'INSERT INTO lotestrxcab (  TxnID, TimeCreated, TimeModified, EditSequence, TxnDate, RefNumber, OrigenID, DestinoID, VehicleID, RouteID, DriverID, Responsable, Status, Estado) VALUES ( :TxnID, :TimeCreated, :TimeModified, :EditSequence, :TxnDate, :RefNumber, :OrigenID, :DestinoID, :VehicleID, :RouteID, :DriverID, :Responsable, :Status, :Estado)';
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':TxnID', $_SESSION['lotestrxcab']['TxnID'] );
	$stmt->bindParam(':TimeCreated', $_SESSION['lotestrxcab']['TimeCreated'] );
	$stmt->bindParam(':TimeModified', $_SESSION['lotestrxcab']['TimeModified'] );
	$stmt->bindParam(':EditSequence', $_SESSION['lotestrxcab']['EditSequence'] );
	$stmt->bindParam(':TxnDate', $_SESSION['lotestrxcab']['TxnDate'] );
	$stmt->bindParam(':RefNumber', $_SESSION['lotestrxcab']['RefNumber'] );
	$stmt->bindParam(':OrigenID', $_SESSION['lotestrxcab']['OrigenID'] );
	$stmt->bindParam(':DestinoID', $_SESSION['lotestrxcab']['DestinoID'] );
	$stmt->bindParam(':VehicleID', $_SESSION['lotestrxcab']['VehicleID'] );
	$stmt->bindParam(':RouteID', $_SESSION['lotestrxcab']['RouteID'] );
	$stmt->bindParam(':DriverID', $_SESSION['lotestrxcab']['DriverID'] );
	$stmt->bindParam(':Responsable', $_SESSION['lotestrxcab']['Responsable'] );
	$stmt->bindParam(':Status', $_SESSION['lotestrxcab']['Status'] );
	$stmt->bindParam(':Estado', $_SESSION['lotestrxcab']['Estado'] );
	$stmt->execute();
        } catch(PDOException $e) {
            echo $e->getMessage();
        }    
}

function quitaslashes_lotestrxcab()
{
         $_SESSION['lotestrxcab']['TxnID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['TxnID']));
$_SESSION['lotestrxcab']['TimeCreated'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['TimeCreated']));
$_SESSION['lotestrxcab']['TimeModified'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['TimeModified']));
$_SESSION['lotestrxcab']['EditSequence'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['EditSequence']));
$_SESSION['lotestrxcab']['TxnDate'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['TxnDate']));
$_SESSION['lotestrxcab']['RefNumber'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['RefNumber']));
$_SESSION['lotestrxcab']['OrigenID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['OrigenID']));
$_SESSION['lotestrxcab']['DestinoID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['DestinoID']));
$_SESSION['lotestrxcab']['VehicleID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['VehicleID']));
$_SESSION['lotestrxcab']['RouteID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['RouteID']));
$_SESSION['lotestrxcab']['DriverID'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['DriverID']));
$_SESSION['lotestrxcab']['Responsable'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['Responsable']));
$_SESSION['lotestrxcab']['Status'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['Status']));
$_SESSION['lotestrxcab']['Estado'] = htmlspecialchars(strip_tags($_SESSION['lotestrxcab']['Estado']));

 
    }
    


// **********************
// GETTER METHODS
// **********************


function getTxnID()
{
return $this->TxnID;
}

function getTimeCreated()
{
return $this->TimeCreated;
}

function getTimeModified()
{
return $this->TimeModified;
}

function getEditSequence()
{
return $this->EditSequence;
}

function getTxnDate()
{
return $this->TxnDate;
}

function getRefNumber()
{
return $this->RefNumber;
}

function getOrigenID()
{
return $this->OrigenID;
}

function getDestinoID()
{
return $this->DestinoID;
}

function getVehicleID()
{
return $this->VehicleID;
}

function getRouteID()
{
return $this->RouteID;
}

function getDriverID()
{
return $this->DriverID;
}

function getResponsable()
{
return $this->Responsable;
}

function getStatus()
{
return $this->Status;
}

function getEstado()
{
return $this->Estado;
}

// **********************
// SETTER METHODS
// **********************


function setTxnID($val)
{
$this->TxnID =  $val;
}

function setTimeCreated($val)
{
$this->TimeCreated =  $val;
}

function setTimeModified($val)
{
$this->TimeModified =  $val;
}

function setEditSequence($val)
{
$this->EditSequence =  $val;
}

function setTxnDate($val)
{
$this->TxnDate =  $val;
}

function setRefNumber($val)
{
$this->RefNumber =  $val;
}

function setOrigenID($val)
{
$this->OrigenID =  $val;
}

function setDestinoID($val)
{
$this->DestinoID =  $val;
}

function setVehicleID($val)
{
$this->VehicleID =  $val;
}

function setRouteID($val)
{
$this->RouteID =  $val;
}

function setDriverID($val)
{
$this->DriverID =  $val;
}

function setResponsable($val)
{
$this->Responsable =  $val;
}

function setStatus($val)
{
$this->Status =  $val;
}

function setEstado($val)
{
$this->Estado =  $val;
}

// ************************************************************************************
// SELECT busca igual en el campo estado retorna OK si existe el registro
//          retorna actualiza si es el mismo registro y tambien carga en la instancia
//          los valores de la lectura
// *************************************************************************************

    function buscaIgual_lotestrxcab() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['lotestrxcab']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetch(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                if ($registro['TxnID'] === $_SESSION['lotestrxcab']['TxnID']) {
                $this->estado = 'ACTUALIZA';
                }
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// ************************************************************************************
// SELECT dependiendo de las condiones recibidas desde el programa llamado se parsea
//          el archivo json para cargar las comparaciones y tambien los nombres de las variables
//          para una lectura de todos los registros que cumplan la condicion
// *************************************************************************************

    function leetodos_lotestrxcab() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['lotestrxcab']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetchAll(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                $this->estado = 'TODOS';
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// **********************
// SELECT METHOD / LOAD
// **********************

function select_lotestrxcab()
{

$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	try {
$sql = 'SELECT * FROM lotestrxcab WHERE TxnID = :clave'; 
$stmt = $this->db->prepare($sql);
    $stmt->bindParam(":clave", $_SESSION['lotestrxcab']['TxnID']);
        $stmt->execute();
	$registro = $stmt->fetch(PDO::FETCH_ASSOC);
	if ( ! $registro) {
		$this->estado = 'OK';
		return $this->estado;
	} else {
                
		if ($registro['TxnID'] === $_SESSION['invoice']['TxnID']) {
                    $this->estado = 'ACTUALIZA';
                    }
                    }
            
                } catch(PDOException $e) {
                    echo $e->getMessage();
                }
                
		$this->TxnID = $registro['TxnID'];

		$this->TimeCreated = $registro['TimeCreated'];

		$this->TimeModified = $registro['TimeModified'];

		$this->EditSequence = $registro['EditSequence'];

		$this->TxnDate = $registro['TxnDate'];

		$this->RefNumber = $registro['RefNumber'];

		$this->OrigenID = $registro['OrigenID'];

		$this->DestinoID = $registro['DestinoID'];

		$this->VehicleID = $registro['VehicleID'];

		$this->RouteID = $registro['RouteID'];

		$this->DriverID = $registro['DriverID'];

		$this->Responsable = $registro['Responsable'];

		$this->Status = $registro['Status'];

		$this->Estado = $registro['Estado'];


}

// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_lotestrxcab()
{

                unset($_SESSION['lotestrxcab']['TxnID']);
unset($_SESSION['lotestrxcab']['TimeCreated']);
unset($_SESSION['lotestrxcab']['TimeModified']);
unset($_SESSION['lotestrxcab']['EditSequence']);
unset($_SESSION['lotestrxcab']['TxnDate']);
unset($_SESSION['lotestrxcab']['RefNumber']);
unset($_SESSION['lotestrxcab']['OrigenID']);
unset($_SESSION['lotestrxcab']['DestinoID']);
unset($_SESSION['lotestrxcab']['VehicleID']);
unset($_SESSION['lotestrxcab']['RouteID']);
unset($_SESSION['lotestrxcab']['DriverID']);
unset($_SESSION['lotestrxcab']['Responsable']);
unset($_SESSION['lotestrxcab']['Status']);
unset($_SESSION['lotestrxcab']['Estado']);


            }

// **********************
// DELETE
// **********************

function delete_lotestrxcab($id)
{


}

// **********************
// UPDATE
// **********************

function update_lotestrxcab()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE lotestrxcab SET TimeCreated=$this->TimeCreated, TimeModified=$this->TimeModified, EditSequence=$this->EditSequence, TxnDate=$this->TxnDate, RefNumber=$this->RefNumber, OrigenID=$this->OrigenID, DestinoID=$this->DestinoID, VehicleID=$this->VehicleID, RouteID=$this->RouteID, DriverID=$this->DriverID, Responsable=$this->Responsable, Status=$this->Status, Estado=$this->Estado, WHERE TxnID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

// ---------------------------------------------------------
// Actualiza tabla con la opcion del PDO bindparam
// ---------------------------------------------------------

function actualiza_lotestrxcab()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE lotestrxcab SET TimeCreated=:TimeCreated, TimeModified=:TimeModified, EditSequence=:EditSequence, TxnDate=:TxnDate, RefNumber=:RefNumber, OrigenID=:OrigenID, DestinoID=:DestinoID, VehicleID=:VehicleID, RouteID=:RouteID, DriverID=:DriverID, Responsable=:Responsable, Status=:Status, Estado=:Estado, WHERE TxnID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':TxnID', $_SESSION['lotestrxcab']['TxnID'] );
	$stmt->bindParam(':TimeCreated', $_SESSION['lotestrxcab']['TimeCreated'] );
	$stmt->bindParam(':TimeModified', $_SESSION['lotestrxcab']['TimeModified'] );
	$stmt->bindParam(':EditSequence', $_SESSION['lotestrxcab']['EditSequence'] );
	$stmt->bindParam(':TxnDate', $_SESSION['lotestrxcab']['TxnDate'] );
	$stmt->bindParam(':RefNumber', $_SESSION['lotestrxcab']['RefNumber'] );
	$stmt->bindParam(':OrigenID', $_SESSION['lotestrxcab']['OrigenID'] );
	$stmt->bindParam(':DestinoID', $_SESSION['lotestrxcab']['DestinoID'] );
	$stmt->bindParam(':VehicleID', $_SESSION['lotestrxcab']['VehicleID'] );
	$stmt->bindParam(':RouteID', $_SESSION['lotestrxcab']['RouteID'] );
	$stmt->bindParam(':DriverID', $_SESSION['lotestrxcab']['DriverID'] );
	$stmt->bindParam(':Responsable', $_SESSION['lotestrxcab']['Responsable'] );
	$stmt->bindParam(':Status', $_SESSION['lotestrxcab']['Status'] );
	$stmt->bindParam(':Estado', $_SESSION['lotestrxcab']['Estado'] );
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

}
?>
<!-- end of generated class -->
