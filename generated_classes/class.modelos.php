
<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        modelos
* GENERATION DATE:  09.09.2018
* CLASS FILE:       C:\wamp64\www\genera_clase/generated_classes/class.modelos.php
* FOR MYSQL TABLE:  modelos
* FOR MYSQL DB:     carrillo_dbaurora
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
include_once("../resources/class.aurora.php");
// **********************
// CLASS DECLARATION
// **********************

class modelos
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************


public $id;   // (normal Attribute)
public $modelName;   // (normal Attribute)
public $actionName;   // (normal Attribute)
public $modelType;   // (normal Attribute)
public $modelDes;   // (normal Attribute)
public $menuName;   // (normal Attribute)
public $menuOrder;   // (normal Attribute)

var $db; // Instance of class db
var $estado; 


// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$this->db = conecta_SYNC();
}

function __destruct()
{


}
public function initialize($entity = null, $options = array())
    {
     $id= new Numeric("id");
$id->setLabel("id");
$id->setFilters(array('int'));
$id->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($id);

$modelType= new Numeric("modelType");
$modelType->setLabel("modelType");
$modelType->setFilters(array('int'));
$modelType->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($modelType);

$menuName= new Text("menuName");
$menuName->setLabel("menuName");
$menuName->setFilters(array('striptags', 'strig'));
$menuName->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($menuName);

$menuOrder= new Numeric("menuOrder");
$menuOrder->setLabel("menuOrder");
$menuOrder->setFilters(array('int'));
$menuOrder->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($menuOrder);


    }
    
function genJson_modelos($jsonString)
{
$_SESSION['modelos']['id'] = $jsonString->id;
$_SESSION['modelos']['modelName'] = $jsonString->modelName;
$_SESSION['modelos']['actionName'] = $jsonString->actionName;
$_SESSION['modelos']['modelType'] = $jsonString->modelType;
$_SESSION['modelos']['modelDes'] = $jsonString->modelDes;
$_SESSION['modelos']['menuName'] = $jsonString->menuName;
$_SESSION['modelos']['menuOrder'] = $jsonString->menuOrder;

}

function genInsert_modelos()
{
$this->setid($_SESSION['modelos']['id']);
$this->setmodelName($_SESSION['modelos']['modelName']);
$this->setactionName($_SESSION['modelos']['actionName']);
$this->setmodelType($_SESSION['modelos']['modelType']);
$this->setmodelDes($_SESSION['modelos']['modelDes']);
$this->setmenuName($_SESSION['modelos']['menuName']);
$this->setmenuOrder($_SESSION['modelos']['menuOrder']);

}

function genLimpia_modelos()
{
$_SESSION['modelos']['id'] = ' ';
$_SESSION['modelos']['modelName'] = ' ';
$_SESSION['modelos']['actionName'] = ' ';
$_SESSION['modelos']['modelType'] = ' ';
$_SESSION['modelos']['modelDes'] = ' ';
$_SESSION['modelos']['menuName'] = ' ';
$_SESSION['modelos']['menuOrder'] = ' ';

}

function gentraverse_modelos($node)
{
$node->getElementsByTagName('id')->item(0) == NULL ? $_SESSION['modelos']['id'] = 0 : $_SESSION['modelos']['id'] = $node->getElementsByTagName('id')->item(0)->nodeValue;
$node->getElementsByTagName('modelName')->item(0) == NULL ? $_SESSION['modelos']['modelName'] =  : $_SESSION['modelos']['modelName'] = $node->getElementsByTagName('modelName')->item(0)->nodeValue;
$node->getElementsByTagName('actionName')->item(0) == NULL ? $_SESSION['modelos']['actionName'] =  : $_SESSION['modelos']['actionName'] = $node->getElementsByTagName('actionName')->item(0)->nodeValue;
$node->getElementsByTagName('modelType')->item(0) == NULL ? $_SESSION['modelos']['modelType'] = 0 : $_SESSION['modelos']['modelType'] = $node->getElementsByTagName('modelType')->item(0)->nodeValue;
$node->getElementsByTagName('modelDes')->item(0) == NULL ? $_SESSION['modelos']['modelDes'] =  : $_SESSION['modelos']['modelDes'] = $node->getElementsByTagName('modelDes')->item(0)->nodeValue;
$node->getElementsByTagName('menuName')->item(0) == NULL ? $_SESSION['modelos']['menuName'] = ' ' : $_SESSION['modelos']['menuName'] = $node->getElementsByTagName('menuName')->item(0)->nodeValue;
$node->getElementsByTagName('menuOrder')->item(0) == NULL ? $_SESSION['modelos']['menuOrder'] = 0 : $_SESSION['modelos']['menuOrder'] = $node->getElementsByTagName('menuOrder')->item(0)->nodeValue;

}

function adiciona_modelos()
{
        $this->estado = 'ERR';
	$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
        $sql = 'INSERT INTO modelos (  id, modelName, actionName, modelType, modelDes, menuName, menuOrder) VALUES ( :id, :modelName, :actionName, :modelType, :modelDes, :menuName, :menuOrder)';
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':id', $_SESSION['modelos']['id'] );
	$stmt->bindParam(':modelName', $_SESSION['modelos']['modelName'] );
	$stmt->bindParam(':actionName', $_SESSION['modelos']['actionName'] );
	$stmt->bindParam(':modelType', $_SESSION['modelos']['modelType'] );
	$stmt->bindParam(':modelDes', $_SESSION['modelos']['modelDes'] );
	$stmt->bindParam(':menuName', $_SESSION['modelos']['menuName'] );
	$stmt->bindParam(':menuOrder', $_SESSION['modelos']['menuOrder'] );
	$stmt->execute();
        } catch(PDOException $e) {
            echo $e->getMessage();
        }    
}

function quitaslashes_modelos()
{
         $_SESSION['modelos']['id'] = htmlspecialchars(strip_tags($_SESSION['modelos']['id']));
$_SESSION['modelos']['modelName'] = htmlspecialchars(strip_tags($_SESSION['modelos']['modelName']));
$_SESSION['modelos']['actionName'] = htmlspecialchars(strip_tags($_SESSION['modelos']['actionName']));
$_SESSION['modelos']['modelType'] = htmlspecialchars(strip_tags($_SESSION['modelos']['modelType']));
$_SESSION['modelos']['modelDes'] = htmlspecialchars(strip_tags($_SESSION['modelos']['modelDes']));
$_SESSION['modelos']['menuName'] = htmlspecialchars(strip_tags($_SESSION['modelos']['menuName']));
$_SESSION['modelos']['menuOrder'] = htmlspecialchars(strip_tags($_SESSION['modelos']['menuOrder']));

 
    }
    


// **********************
// GETTER METHODS
// **********************


function getid()
{
return $this->id;
}

function getmodelName()
{
return $this->modelName;
}

function getactionName()
{
return $this->actionName;
}

function getmodelType()
{
return $this->modelType;
}

function getmodelDes()
{
return $this->modelDes;
}

function getmenuName()
{
return $this->menuName;
}

function getmenuOrder()
{
return $this->menuOrder;
}

// **********************
// SETTER METHODS
// **********************


function setid($val)
{
$this->id =  $val;
}

function setmodelName($val)
{
$this->modelName =  $val;
}

function setactionName($val)
{
$this->actionName =  $val;
}

function setmodelType($val)
{
$this->modelType =  $val;
}

function setmodelDes($val)
{
$this->modelDes =  $val;
}

function setmenuName($val)
{
$this->menuName =  $val;
}

function setmenuOrder($val)
{
$this->menuOrder =  $val;
}

// ************************************************************************************
// SELECT busca igual en el campo estado retorna OK si existe el registro
//          retorna actualiza si es el mismo registro y tambien carga en la instancia
//          los valores de la lectura
// *************************************************************************************

    function buscaIgual_modelos() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['modelos']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetch(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                if ($registro['TxnID'] === $_SESSION['modelos']['TxnID']) {
                $this->estado = 'ACTUALIZA';
                }
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// ************************************************************************************
// SELECT dependiendo de las condiones recibidas desde el programa llamado se parsea
//          el archivo json para cargar las comparaciones y tambien los nombres de las variables
//          para una lectura de todos los registros que cumplan la condicion
// *************************************************************************************

    function leetodos_modelos() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['modelos']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetchAll(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                $this->estado = 'TODOS';
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// **********************
// SELECT METHOD / LOAD
// **********************

function select_modelos()
{

$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	try {
$sql = 'SELECT * FROM modelos WHERE id = :clave'; 
$stmt = $this->db->prepare($sql);
    $stmt->bindParam(":clave", $_SESSION['modelos']['TxnID']);
        $stmt->execute();
	$registro = $stmt->fetch(PDO::FETCH_ASSOC);
	if ( ! $registro) {
		$this->estado = 'OK';
		return $this->estado;
	} else {
                
		if ($registro['TxnID'] === $_SESSION['invoice']['TxnID']) {
                    $this->estado = 'ACTUALIZA';
                    }
                    }
            
                } catch(PDOException $e) {
                    echo $e->getMessage();
                }
                
		$this->id = $registro['id'];

		$this->modelName = $registro['modelName'];

		$this->actionName = $registro['actionName'];

		$this->modelType = $registro['modelType'];

		$this->modelDes = $registro['modelDes'];

		$this->menuName = $registro['menuName'];

		$this->menuOrder = $registro['menuOrder'];


}

// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_modelos()
{

                unset($_SESSION['modelos']['id']);
unset($_SESSION['modelos']['modelName']);
unset($_SESSION['modelos']['actionName']);
unset($_SESSION['modelos']['modelType']);
unset($_SESSION['modelos']['modelDes']);
unset($_SESSION['modelos']['menuName']);
unset($_SESSION['modelos']['menuOrder']);


            }

// **********************
// DELETE
// **********************

function delete_modelos($id)
{


}

// **********************
// UPDATE
// **********************

function update_modelos()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE modelos SET modelName=$this->modelName, actionName=$this->actionName, modelType=$this->modelType, modelDes=$this->modelDes, menuName=$this->menuName, menuOrder=$this->menuOrder, WHERE id = :clave;'; 
	$stmt = $this->db->prepare($sql);
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

// ---------------------------------------------------------
// Actualiza tabla con la opcion del PDO bindparam
// ---------------------------------------------------------

function actualiza_modelos()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE modelos SET modelName=:modelName, actionName=:actionName, modelType=:modelType, modelDes=:modelDes, menuName=:menuName, menuOrder=:menuOrder, WHERE id = :clave;'; 
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':id', $_SESSION['modelos']['id'] );
	$stmt->bindParam(':modelName', $_SESSION['modelos']['modelName'] );
	$stmt->bindParam(':actionName', $_SESSION['modelos']['actionName'] );
	$stmt->bindParam(':modelType', $_SESSION['modelos']['modelType'] );
	$stmt->bindParam(':modelDes', $_SESSION['modelos']['modelDes'] );
	$stmt->bindParam(':menuName', $_SESSION['modelos']['menuName'] );
	$stmt->bindParam(':menuOrder', $_SESSION['modelos']['menuOrder'] );
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

}
?>
<!-- end of generated class -->
