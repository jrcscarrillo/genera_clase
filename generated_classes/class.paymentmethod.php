
<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        paymentmethod
* GENERATION DATE:  06.06.2018
* CLASS FILE:       C:\wamp64\www\genera_clase/generated_classes/class.paymentmethod.php
* FOR MYSQL TABLE:  paymentmethod
* FOR MYSQL DB:     carrillo_dbaurora
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
include_once("../resources/class.aurora.php");
// **********************
// CLASS DECLARATION
// **********************

class paymentmethod
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************


public $ListID;   // (normal Attribute)
public $TimeCreated;   // (normal Attribute)
public $TimeModified;   // (normal Attribute)
public $EditSequence;   // (normal Attribute)
public $Name;   // (normal Attribute)
public $IsActive;   // (normal Attribute)
public $PaymentMethodType;   // (normal Attribute)
public $Status;   // (normal Attribute)

var $db; // Instance of class db
var $estado; 


// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$this->db = conecta_SYNC();
}

function __destruct()
{


}
public function initialize($entity = null, $options = array())
    {
     $ListID= new Text("ListID");
$ListID->setLabel("ListID");
$ListID->setFilters(array('striptags', 'strig'));
$ListID->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($ListID);

$TimeCreated= new Date("TimeCreated");
$TimeCreated->setLabel("TimeCreated");
$TimeCreated->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($TimeCreated);

$TimeModified= new Date("TimeModified");
$TimeModified->setLabel("TimeModified");
$TimeModified->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($TimeModified);

$EditSequence= new Numeric("EditSequence");
$EditSequence->setLabel("EditSequence");
$EditSequence->setFilters(array('int'));
$EditSequence->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($EditSequence);

$Name= new Text("Name");
$Name->setLabel("Name");
$Name->setFilters(array('striptags', 'strig'));
$Name->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($Name);

$IsActive= new Text("IsActive");
$IsActive->setLabel("IsActive");
$IsActive->setFilters(array('striptags', 'strig'));
$IsActive->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($IsActive);

$PaymentMethodType= new Text("PaymentMethodType");
$PaymentMethodType->setLabel("PaymentMethodType");
$PaymentMethodType->setFilters(array('striptags', 'strig'));
$PaymentMethodType->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($PaymentMethodType);

$Status= new Text("Status");
$Status->setLabel("Status");
$Status->setFilters(array('striptags', 'strig'));
$Status->addValidators(array(
new PresenceOf(array(
'message'=> 'Mensaje de validacion'
))
));
$this->add($Status);


    }
    
function genJson_paymentmethod($jsonString)
{
$_SESSION['paymentmethod']['ListID'] = $jsonString->ListID;
$_SESSION['paymentmethod']['TimeCreated'] = $jsonString->TimeCreated;
$_SESSION['paymentmethod']['TimeModified'] = $jsonString->TimeModified;
$_SESSION['paymentmethod']['EditSequence'] = $jsonString->EditSequence;
$_SESSION['paymentmethod']['Name'] = $jsonString->Name;
$_SESSION['paymentmethod']['IsActive'] = $jsonString->IsActive;
$_SESSION['paymentmethod']['PaymentMethodType'] = $jsonString->PaymentMethodType;
$_SESSION['paymentmethod']['Status'] = $jsonString->Status;

}

function genInsert_paymentmethod()
{
$this->setListID($_SESSION['paymentmethod']['ListID']);
$this->setTimeCreated($_SESSION['paymentmethod']['TimeCreated']);
$this->setTimeModified($_SESSION['paymentmethod']['TimeModified']);
$this->setEditSequence($_SESSION['paymentmethod']['EditSequence']);
$this->setName($_SESSION['paymentmethod']['Name']);
$this->setIsActive($_SESSION['paymentmethod']['IsActive']);
$this->setPaymentMethodType($_SESSION['paymentmethod']['PaymentMethodType']);
$this->setStatus($_SESSION['paymentmethod']['Status']);

}

function genLimpia_paymentmethod()
{
$_SESSION['paymentmethod']['ListID'] = ' ';
$_SESSION['paymentmethod']['TimeCreated'] = ' ';
$_SESSION['paymentmethod']['TimeModified'] = ' ';
$_SESSION['paymentmethod']['EditSequence'] = ' ';
$_SESSION['paymentmethod']['Name'] = ' ';
$_SESSION['paymentmethod']['IsActive'] = ' ';
$_SESSION['paymentmethod']['PaymentMethodType'] = ' ';
$_SESSION['paymentmethod']['Status'] = ' ';

}

function gentraverse_paymentmethod($node)
{
$node->getElementsByTagName('ListID')->item(0) == NULL ? $_SESSION['paymentmethod']['ListID'] = ' ' : $_SESSION['paymentmethod']['ListID'] = $node->getElementsByTagName('ListID')->item(0)->nodeValue;
$node->getElementsByTagName('TimeCreated')->item(0) == NULL ? $_SESSION['paymentmethod']['TimeCreated'] = '2010-08-10' : $_SESSION['paymentmethod']['TimeCreated'] = $node->getElementsByTagName('TimeCreated')->item(0)->nodeValue;
$node->getElementsByTagName('TimeModified')->item(0) == NULL ? $_SESSION['paymentmethod']['TimeModified'] = '2010-08-10' : $_SESSION['paymentmethod']['TimeModified'] = $node->getElementsByTagName('TimeModified')->item(0)->nodeValue;
$node->getElementsByTagName('EditSequence')->item(0) == NULL ? $_SESSION['paymentmethod']['EditSequence'] = 0 : $_SESSION['paymentmethod']['EditSequence'] = $node->getElementsByTagName('EditSequence')->item(0)->nodeValue;
$node->getElementsByTagName('Name')->item(0) == NULL ? $_SESSION['paymentmethod']['Name'] = ' ' : $_SESSION['paymentmethod']['Name'] = $node->getElementsByTagName('Name')->item(0)->nodeValue;
$node->getElementsByTagName('IsActive')->item(0) == NULL ? $_SESSION['paymentmethod']['IsActive'] = ' ' : $_SESSION['paymentmethod']['IsActive'] = $node->getElementsByTagName('IsActive')->item(0)->nodeValue;
$node->getElementsByTagName('PaymentMethodType')->item(0) == NULL ? $_SESSION['paymentmethod']['PaymentMethodType'] = ' ' : $_SESSION['paymentmethod']['PaymentMethodType'] = $node->getElementsByTagName('PaymentMethodType')->item(0)->nodeValue;
$node->getElementsByTagName('Status')->item(0) == NULL ? $_SESSION['paymentmethod']['Status'] = ' ' : $_SESSION['paymentmethod']['Status'] = $node->getElementsByTagName('Status')->item(0)->nodeValue;

}

function adiciona_paymentmethod()
{
        $this->estado = 'ERR';
	$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
        $sql = 'INSERT INTO paymentmethod (  ListID, TimeCreated, TimeModified, EditSequence, Name, IsActive, PaymentMethodType, Status) VALUES ( :ListID, :TimeCreated, :TimeModified, :EditSequence, :Name, :IsActive, :PaymentMethodType, :Status)';
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':ListID', $_SESSION['paymentmethod']['ListID'] );
	$stmt->bindParam(':TimeCreated', $_SESSION['paymentmethod']['TimeCreated'] );
	$stmt->bindParam(':TimeModified', $_SESSION['paymentmethod']['TimeModified'] );
	$stmt->bindParam(':EditSequence', $_SESSION['paymentmethod']['EditSequence'] );
	$stmt->bindParam(':Name', $_SESSION['paymentmethod']['Name'] );
	$stmt->bindParam(':IsActive', $_SESSION['paymentmethod']['IsActive'] );
	$stmt->bindParam(':PaymentMethodType', $_SESSION['paymentmethod']['PaymentMethodType'] );
	$stmt->bindParam(':Status', $_SESSION['paymentmethod']['Status'] );
	$stmt->execute();
        } catch(PDOException $e) {
            echo $e->getMessage();
        }    
}

function quitaslashes_paymentmethod()
{
         $_SESSION['paymentmethod']['ListID'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['ListID']));
$_SESSION['paymentmethod']['TimeCreated'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['TimeCreated']));
$_SESSION['paymentmethod']['TimeModified'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['TimeModified']));
$_SESSION['paymentmethod']['EditSequence'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['EditSequence']));
$_SESSION['paymentmethod']['Name'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['Name']));
$_SESSION['paymentmethod']['IsActive'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['IsActive']));
$_SESSION['paymentmethod']['PaymentMethodType'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['PaymentMethodType']));
$_SESSION['paymentmethod']['Status'] = htmlspecialchars(strip_tags($_SESSION['paymentmethod']['Status']));

 
    }
    


// **********************
// GETTER METHODS
// **********************


function getListID()
{
return $this->ListID;
}

function getTimeCreated()
{
return $this->TimeCreated;
}

function getTimeModified()
{
return $this->TimeModified;
}

function getEditSequence()
{
return $this->EditSequence;
}

function getName()
{
return $this->Name;
}

function getIsActive()
{
return $this->IsActive;
}

function getPaymentMethodType()
{
return $this->PaymentMethodType;
}

function getStatus()
{
return $this->Status;
}

// **********************
// SETTER METHODS
// **********************


function setListID($val)
{
$this->ListID =  $val;
}

function setTimeCreated($val)
{
$this->TimeCreated =  $val;
}

function setTimeModified($val)
{
$this->TimeModified =  $val;
}

function setEditSequence($val)
{
$this->EditSequence =  $val;
}

function setName($val)
{
$this->Name =  $val;
}

function setIsActive($val)
{
$this->IsActive =  $val;
}

function setPaymentMethodType($val)
{
$this->PaymentMethodType =  $val;
}

function setStatus($val)
{
$this->Status =  $val;
}

// ************************************************************************************
// SELECT busca igual en el campo estado retorna OK si existe el registro
//          retorna actualiza si es el mismo registro y tambien carga en la instancia
//          los valores de la lectura
// *************************************************************************************

    function buscaIgual_paymentmethod() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['paymentmethod']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetch(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                if ($registro['TxnID'] === $_SESSION['paymentmethod']['TxnID']) {
                $this->estado = 'ACTUALIZA';
                }
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// ************************************************************************************
// SELECT dependiendo de las condiones recibidas desde el programa llamado se parsea
//          el archivo json para cargar las comparaciones y tambien los nombres de las variables
//          para una lectura de todos los registros que cumplan la condicion
// *************************************************************************************

    function leetodos_paymentmethod() {
        $estado = 'ERR';
        $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $stmt = $this->db->prepare($sql);
            $stmt->bindParam(':clave', $_SESSION['paymentmethod']['TxnID']);
            $stmt->execute();
            $registro = $stmt->fetchAll(PDO::FETCH_ASSOC);
            if ( ! $registro){
                $this->estado = 'OK';
            } else {
                $this->estado = 'TODOS';
            }
            
        } catch(PDOException $e) {
            echo $e->getMessage();
        } 
    
    return $this->estado;
    }
// **********************
// SELECT METHOD / LOAD
// **********************

function select_paymentmethod()
{

$this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
	try {
$sql = 'SELECT * FROM paymentmethod WHERE ListID = :clave'; 
$stmt = $this->db->prepare($sql);
    $stmt->bindParam(":clave", $_SESSION['paymentmethod']['TxnID']);
        $stmt->execute();
	$registro = $stmt->fetch(PDO::FETCH_ASSOC);
	if ( ! $registro) {
		$this->estado = 'OK';
		return $this->estado;
	} else {
                
		if ($registro['TxnID'] === $_SESSION['invoice']['TxnID']) {
                    $this->estado = 'ACTUALIZA';
                    }
                    }
            
                } catch(PDOException $e) {
                    echo $e->getMessage();
                }
                
		$this->ListID = $registro['ListID'];

		$this->TimeCreated = $registro['TimeCreated'];

		$this->TimeModified = $registro['TimeModified'];

		$this->EditSequence = $registro['EditSequence'];

		$this->Name = $registro['Name'];

		$this->IsActive = $registro['IsActive'];

		$this->PaymentMethodType = $registro['PaymentMethodType'];

		$this->Status = $registro['Status'];


}

// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_paymentmethod()
{

                unset($_SESSION['paymentmethod']['ListID']);
unset($_SESSION['paymentmethod']['TimeCreated']);
unset($_SESSION['paymentmethod']['TimeModified']);
unset($_SESSION['paymentmethod']['EditSequence']);
unset($_SESSION['paymentmethod']['Name']);
unset($_SESSION['paymentmethod']['IsActive']);
unset($_SESSION['paymentmethod']['PaymentMethodType']);
unset($_SESSION['paymentmethod']['Status']);


            }

// **********************
// DELETE
// **********************

function delete_paymentmethod($id)
{


}

// **********************
// UPDATE
// **********************

function update_paymentmethod()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE paymentmethod SET TimeCreated=$this->TimeCreated, TimeModified=$this->TimeModified, EditSequence=$this->EditSequence, Name=$this->Name, IsActive=$this->IsActive, PaymentMethodType=$this->PaymentMethodType, Status=$this->Status, WHERE ListID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

// ---------------------------------------------------------
// Actualiza tabla con la opcion del PDO bindparam
// ---------------------------------------------------------

function actualiza_paymentmethod()
{
    $this->estado = 'ERR';
	 $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {
	$sql = 'UPDATE paymentmethod SET TimeCreated=:TimeCreated, TimeModified=:TimeModified, EditSequence=:EditSequence, Name=:Name, IsActive=:IsActive, PaymentMethodType=:PaymentMethodType, Status=:Status, WHERE ListID = :clave;'; 
	$stmt = $this->db->prepare($sql);
	 $stmt->bindParam(':ListID', $_SESSION['paymentmethod']['ListID'] );
	$stmt->bindParam(':TimeCreated', $_SESSION['paymentmethod']['TimeCreated'] );
	$stmt->bindParam(':TimeModified', $_SESSION['paymentmethod']['TimeModified'] );
	$stmt->bindParam(':EditSequence', $_SESSION['paymentmethod']['EditSequence'] );
	$stmt->bindParam(':Name', $_SESSION['paymentmethod']['Name'] );
	$stmt->bindParam(':IsActive', $_SESSION['paymentmethod']['IsActive'] );
	$stmt->bindParam(':PaymentMethodType', $_SESSION['paymentmethod']['PaymentMethodType'] );
	$stmt->bindParam(':Status', $_SESSION['paymentmethod']['Status'] );
	$stmt->bindParam(':clave', $_SESSION['invoice']['TxnID']);
	$stmt->execute();
     } catch(PDOException $e) {
}
     }

}
?>
<!-- end of generated class -->
