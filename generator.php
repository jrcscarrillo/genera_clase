<?php
require_once "resources/class.database.php";
$db = conecta_SYNC();
        $database =  "carrillo_dbaurora";
        $table = $_POST["tablename"];
        $class = $_POST["classname"];
        $key = $_POST["keyname"];
        $obj = $_POST["objeto"];
        $dir = dirname(__FILE__);

        $filename = $dir . "/generated_classes/" . "class." . $class . ".php";
        $nombreArchivo = $dir . "/generated_classes/" . $class . ".js";

// if file exists, then delete it
        if (file_exists($filename)) {
            unlink($filename);
        }
        if (file_exists($nombreArchivo)) {
            unlink($nombreArchivo);
        }

// open file in insert mode
        $file = fopen($filename, "w+");
        $archivo = fopen($nombreArchivo, "w+");
        $filedate = date("d.m.Y");

        $c = "";

        $c = "
<!-- begin of generated class -->
<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        $class
* GENERATION DATE:  $filedate
* CLASS FILE:       $filename
* FOR MYSQL TABLE:  $table
* FOR MYSQL DB:     $database
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
include_once(\"../resources/class.aurora.php\");
// **********************
// CLASS DECLARATION
// **********************

class $class
{ // class : begin


// **********************
// ATTRIBUTE DECLARATION
// **********************

";

        $sql = "SHOW COLUMNS FROM $table;";
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        $for_scope = '$scope.' . $class . ' = {';
        $for_data = "data: {";
        $for_success = "{";
        $for_bind = "";
        $for_json = "";
        $for_insert = "";
        $for_while = "";
        $for_fetch = "";
        $for_fetch2 = "";
        $for_unset = "";
        $for_traverse = "";
        $for_limpia = "";
        $for_columnas = " ";
        $for_parametros = " ";
        $for_crea1 = " ";
        $for_crea2 = " ";
        $for_forma = " ";
        $for_db = "$" . "db_";
        $for_reg = "$" . "registro";
        $len_class = strlen($class);

        foreach ($result as $row) {
    
            $col = $row[0];

            $pega = strpos($row[0], "_");
            if ($pega > 0) {
                $colaux = substr($row[0], $pega + 1);
            } else {
                $colaux = $col;
            }

            $pega = strpos($row[1], "(");
            if ($pega > 0) {
                $tipo = substr($row[1], 0, $pega);
            } else {
                $tipo = $row[1];
            }

//            echo $col . ' tiene => ' . $tipo . '<br>';

            $for_scope .= '"' . $col . '": $scope.' . $col . ',';
            $for_scope .= "\r\n";
            $for_data .= '"' . $col . '": $scope.' . $class . '.' . $col . ',';
            $for_data .= "\r\n";
            $for_success .= '$scope.' . $class . '.' . $col . ' = data.' . $col . ';';
            $for_success .= "\r\n";
            $for_bind .= $for_db . $col . ", ";
            $for_json .= "$" . "_SESSION['" . $class . "']['" . $col . "']" . " = $" . "jsonString->" . $col . ";";
            $for_json .= "\r\n";
            $for_insert .= $obj . "->set" . $col . "($" . "_SESSION['" . $class . "']['" . $col . "']);";
            $for_insert .= "\r\n";
            $for_while .= $obj . "->" . $col . " = " . $for_db . $col . ";";
            $for_while .= "\r\n";
            $for_fetch .= "\r\n";
            $for_fetch .= "\t\t$" . "this->" . $col . " = " . $for_reg . "['" . $col . "'];";
            $for_fetch .= "\r\n";
            $for_fetch2 .= "$" . "_SESSION['" . $class . "']['" . $col . "'] = " . $obj . "->get" . $col . "();";
            $for_fetch2 .= "\r\n";
            $for_unset .= "unset($" . "_SESSION['" . $class . "']['" . $col . "']);";
            $for_unset .= "\r\n";

            $relleno = "";
            if ($tipo == 'varchar') {
                $relleno = "' '";
            } elseif ($tipo == "decimal" or $tipo == "float" or $tipo == "int") {
                $relleno = 0;
            } elseif ($tipo == "date" or $tipo == "datetime" or $tipo == "timestamp") {
                $relleno = "'" . date("Y-m-d", strtotime("2010-08-10")) . "'";
            }

            $for_traverse .= "$" . "node->getElementsByTagName('" . $colaux . "')->item(0) == NULL ? " . "$" . "_SESSION['" . $class . "']['" . $col . "'] = " . $relleno . " : $" . "_SESSION['" . $class . "']['" . $col . "'] = $" . "node->getElementsByTagName('" . $colaux . "')->item(0)->nodeValue;";
            $for_traverse .= "\r\n";
            $for_limpia .= "$" . "_SESSION['" . $class . "']['" . $col . "'] = ' ';";
            $for_limpia .= "\r\n";
            $for_columnas .= $col . ", ";
            $for_parametros .= ":" . $col . ", ";
            $for_crea1 .= "$" . "_SESSION['" . $class . "']['" . $col . "'] = " . "htmlspecialchars(strip_tags($" . "_SESSION['" . $class . "']['" . $col . "']));";
            $for_crea1 .= "\r\n";
            $for_crea2 .= "$" . "stmt->bindParam(':" . $col . "', $" . "_SESSION['" . $class . "']['" . $col . "'] );";
            $for_crea2 .= "\r\n\t";
            $form1 = "";
            if ($tipo == 'varchar') {
                $form1 = "$" . $col . "= new Text(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setLabel(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setFilters(array('striptags', 'strig'));" . "\r\n";
                $form1 .= "$" . $col . "->addValidators(array(" . "\r\n";
                $form1 .= "new PresenceOf(array(" . "\r\n";
                $form1 .= "'message'" . "=> 'Mensaje de validacion'" . "\r\n";
                $form1 .= "))" . "\r\n";
                $form1 .= "));" . "\r\n";
                $form1 .= "$" . "this->add($" . $col . ");" . "\r\n\r\n";
            } elseif ($tipo == "int") {
                $form1 = "$" . $col . "= new Numeric(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setLabel(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setFilters(array('int'));" . "\r\n";
                $form1 .= "$" . $col . "->addValidators(array(" . "\r\n";
                $form1 .= "new PresenceOf(array(" . "\r\n";
                $form1 .= "'message'" . "=> 'Mensaje de validacion'" . "\r\n";
                $form1 .= "))" . "\r\n";
                $form1 .= "));" . "\r\n";
                $form1 .= "$" . "this->add($" . $col . ");" . "\r\n\r\n";
            } elseif ($tipo == "float" or $tipo == "decimal") {
                $form1 = "$" . $col . "= new Numeric(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setLabel(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setFilters(array('float'));" . "\r\n";
                $form1 .= "$" . $col . "->addValidators(array(" . "\r\n";
                $form1 .= "new PresenceOf(array(" . "\r\n";
                $form1 .= "'message'" . "=> 'Mensaje de validacion'" . "\r\n";
                $form1 .= "))" . "\r\n";
                $form1 .= "));" . "\r\n";
                $form1 .= "$" . "this->add($" . $col . ");" . "\r\n\r\n";
            } elseif ($tipo == "date" or $tipo == "datetime" or $tipo == "timestamp") {
                $form1 = "$" . $col . "= new Date(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->setLabel(\"$col\");" . "\r\n";
                $form1 .= "$" . $col . "->addValidators(array(" . "\r\n";
                $form1 .= "new PresenceOf(array(" . "\r\n";
                $form1 .= "'message'" . "=> 'Mensaje de validacion'" . "\r\n";
                $form1 .= "))" . "\r\n";
                $form1 .= "));" . "\r\n";
                $form1 .= "$" . "this->add($" . $col . ");" . "\r\n\r\n";
            }
            $for_forma .= $form1;
            $c .= "
public $$col;   // (normal Attribute)";
        } // endwhile
        $for_columnas = rtrim($for_columnas, ", ");
        $for_parametros = rtrim($for_parametros, ", ");
        $cdb = "$" . "db";
        $estado = "$" . "estado";
        $cdb2 = "db";
        $c .= "

var $cdb; // Instance of class db
var $estado; 

";

        $cthis = "$" . "this->";
        $sthis = "$" . "this->estado";
        $thisdb = $cthis . $cdb2 . " = " . "conecta_SYNC();";
        $thisj = "$" . "jsonString";
        $node = "$" . "node";
        $c .= "
// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$thisdb
}

function __destruct()
{


}
public function initialize($" . "entity = null, $" . "options = array())
    {
    $for_forma
    }
    
function genJson_$class($thisj)
{
$for_json
}

function genInsert_$class()
{
$for_insert
}

function genLimpia_$class()
{
$for_limpia
}

function gentraverse_$class($node)
{
$for_traverse
}

function adiciona_$class()
{
        $" . "this->estado = 'ERR';\r\n\t" . "$" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
        $" . "sql = 'INSERT INTO " . $table . " ( " . $for_columnas . ") VALUES (" . $for_parametros . ")';\r\n\t" . "$" . "stmt = $" . "this->db->prepare($" . "sql);\r\n\t" . $for_crea2 .
           "$" . "stmt->execute();
        } catch(PDOException $" . "e) {
            echo $" . "e->getMessage();
        }    
}

function quitaslashes_$class()
{
        $for_crea1
 
    }
    

";

        $c .= "
// **********************
// GETTER METHODS
// **********************

";
// GETTER
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        foreach($result as $row) {
            $col = $row[0];
            $mname = "get" . $col . "()";
            $mthis = "$" . "this->" . $col;
            $c .= "
function $mname
{
return $mthis;
}
";
        }


        $c .= "
// **********************
// SETTER METHODS
// **********************

";
// SETTER
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        foreach ($result as $row) {
    
            $col = $row[0];
            $val = "$" . "val";
            $mname = "set" . $col . "($" . "val)";
            $mthis = "$" . "this->" . $col . " = ";
            $c .= "
function $mname
{
$mthis $val;
}
";
        }
        $c .= "
// ************************************************************************************
// SELECT busca igual en el campo estado retorna OK si existe el registro
//          retorna actualiza si es el mismo registro y tambien carga en la instancia
//          los valores de la lectura
// *************************************************************************************

    function buscaIgual_" . $class . "() {
        $" . "estado = 'ERR';
        $" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $" . "sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $" . "stmt = $" . "this->db->prepare($" . "sql);
            $" . "stmt->bindParam(':clave', $" . "_SESSION['" . $class . "']['TxnID']);
            $" . "stmt->execute();
            $" . "registro = $" . "stmt->fetch(PDO::FETCH_ASSOC);
            if ( ! $" . "registro){
                $" . "this->estado = 'OK';
            } else {
                if ($" . "registro['TxnID'] === $" . "_SESSION['" . $class . "']['TxnID']) {
                $" . "this->estado = 'ACTUALIZA';
                }
            }
            
        } catch(PDOException $" . "e) {
            echo $" . "e->getMessage();
        } 
    
    return $" . "this->estado;
    }";


        $c .= "
// ************************************************************************************
// SELECT dependiendo de las condiones recibidas desde el programa llamado se parsea
//          el archivo json para cargar las comparaciones y tambien los nombres de las variables
//          para una lectura de todos los registros que cumplan la condicion
// *************************************************************************************

    function leetodos_" . $class . "() {
        $" . "estado = 'ERR';
        $" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        try {
            $" . "sql =  'SELECT * FROM invoice WHERE TxnID = :clave ';
            $" . "stmt = $" . "this->db->prepare($" . "sql);
            $" . "stmt->bindParam(':clave', $" . "_SESSION['" . $class . "']['TxnID']);
            $" . "stmt->execute();
            $" . "registro = $" . "stmt->fetchAll(PDO::FETCH_ASSOC);
            if ( ! $" . "registro){
                $" . "this->estado = 'OK';
            } else {
                $" . "this->estado = 'TODOS';
            }
            
        } catch(PDOException $" . "e) {
            echo $" . "e->getMessage();
        } 
    
    return $" . "this->estado;
    }";
        /**
         * @var $zeile0 Identifica la conexion a la base de datos que es un objeto instanciado de la clase aurora
         * @var $prepare Es el inicio de la declaracion prepare para la base de datos
         * @var $bind Aqui debe incluirse los argumentos de busqueda de la clase (tabla) que se utilizara frecuentemente
         * @var $bin_r Los campos seleccionados de la clase que estamos construyendo para ser presentado en el resultado
         * @var $execute Ejecutar la declaracion preparada de sql
         * @var $fetch Un if con una sentencia fetch para capturar una fila de una tabla
         */
        $sel = "$" . "sql = 'SELECT * FROM $table WHERE $key = :clave';";
        $id = "$" . "id";
        $thisdb = "$" . "this->" . "db";
        $thisdbquery = "$" . "this->" . "db->query($" . "sql" . ")";
        $result = "$" . "result = ";
        $row = "$" . "row";
        $result1 = "$" . "result";
        $cerrar = "$" . "db->close();";
        $res = "$" . "result = $" . "this->db->result;";
        $zeile0 = "$" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\t" . "try {";
        $prepare = "$" . "stmt = $" . "this->db->prepare($" . "sql);";
        $bind = "$" . 'stmt->bindParam(":clave", $' . "_SESSION['" . $table . "']['TxnID']);";

        $for_bind = rtrim($for_bind, ", ");
        $bind_r = "$" . "stmt->execute();\r\n\t$" . "registro = $" . "stmt->fetch(PDO::FETCH_ASSOC);\r\n\t" . "if ( ! $" . "registro) {\r\n\t\t" . "$" . "this->estado = 'OK';\r\n" .
           "\t\treturn $" . "this->estado;\r\n\t} else {
                \r\n\t\tif (" . "$" . "registro['TxnID'] === $" . "_SESSION['invoice']['TxnID']) {
                    $" . "this->estado = 'ACTUALIZA';
                    }
                    }
            
                } catch(PDOException $" . "e) {
                    echo $" . "e->getMessage();
                }";
        $execute = "$" . "stmt->execute();";
        $fetch = "if ($" . "stmt->fetch()) {";
        $while = "while ($" . "stmt->fetch()) {";
        $c .= "
// **********************
// SELECT METHOD / LOAD
// **********************

function select_$class()
{

$zeile0
$sel 
$prepare
    $bind
        $bind_r
                $for_fetch
";
        $c .= "
}
";

        $clean = $class . "()";
        $c .= "
// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_$clean
{

                $for_unset
";

        $c .= "
            }
";

        $zeile1 = "$" . "sql" . " = \"DELETE FROM $table WHERE $key = ?\"";
        $c .= "
// **********************
// DELETE
// **********************

function delete_$class($id)
{

";
        $c .= "
}
";


        $zeile1 = "$" . "this->$key = \"\"";
        $zeile2 = "INSERT INTO $table (";
        $zeile5 = ")";
        $zeile3 = "";
        $zeile4 = "";
        $zeile6 = "VALUES (";

        $sql = "SHOW COLUMNS FROM $table;";
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        foreach ($result as $row) {
    
            $col = $row[0];

            if ($col != $key) {
                $zeile3 .= "$col" . ",";
                $zeile4 .= "'$" . "this->$col" . "',";
//$zeile3 = rtrim($zeile3);
//$zeile4 = rtrim($zeile4);
//$zeile3 = str_replace(",", " ", $zeile3);
//$zeile4 = str_replace(",", " ", $zeile4);
            }
        }

        $zeile3 = substr($zeile3, 0, -1);
        $zeile4 = substr($zeile4, 0, -1);
        $sql = "$" . "sql =";
        $zeile7 = "$" . "result = $" . "this->db->prepare($" . "sql);";
        $zeile8 = "$" . "row";
        $zeile9 = "$" . "result";
        $zeile10 = "$" . "this->$key = " . "mysql_insert_id($" . "this->db->link);";


// UPDATE ----------------------------------------

        $zeile5 = ")";
        $zeile3 = "";
        $zeile4 = "";
        $zeile6 = "VALUES (";

        $upd = "";
        $upd1 = "";

        $sql = "SHOW COLUMNS FROM $table;";
        $stmt =  $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetchAll();
        foreach ($result as $row) {
    
            $col = $row[0];

            if ($col != $key) {
                $zeile3 .= "$col" . ",";
                $zeile4 .= "$" . "this->$col" . ",";
                $upd .= "" . "$col=$" . "this->$col, ";
                $upd1 .= "" . "$col=:" . "$col, ";
            }
        }

        $zeile3 = substr($zeile3, 0, -1);
        $zeile4 = substr($zeile4, 0, -1);
        $upd = substr($upd, 0, -1);
        $upd1 = substr($upd1, 0, -1);
        $sql = "$" . "sql = \"";
        $zeile7 = "$" . "result = $" . "this->db->query($" . "sql)";
        $zeile8 = "$" . "row";
        $zeile9 = "$" . "result";
        $zeile10 = "$" . "this->$key = $" . "row->$key";
        $id = "$" . "id";
        $where = "WHERE " . "$key = :clave";

        $c .= "
// **********************
// UPDATE
// **********************

function update_$class()
{
    $" . "this->estado = 'ERR';\r\n\t $" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {\r\n\t$" .
           "sql = 'UPDATE $table SET $upd $where;'; \r\n\t$" .
           "stmt = $" . "this->db->prepare($" .
           "sql);\r\n\t$" . "stmt->bindParam(':clave', $" . "_SESSION['invoice']['TxnID']);\r\n\t$" . "stmt->execute();
     } catch(PDOException $" . "e) {
}
     }
";
        $c .= "
// ---------------------------------------------------------
// Actualiza tabla con la opcion del PDO bindparam
// ---------------------------------------------------------

function actualiza_$class()
{
    $" . "this->estado = 'ERR';\r\n\t $" . "this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            try {\r\n\t$" .
           "sql = 'UPDATE $table SET $upd1 $where;'; \r\n\t$" .
           "stmt = $" . "this->db->prepare($" .
           "sql);\r\n\t" . $for_crea2 . "$" . "stmt->bindParam(':clave', $" . "_SESSION['invoice']['TxnID']);\r\n\t$" . "stmt->execute();
     } catch(PDOException $" . "e) {
}
     }
";

        $c .= "
}
?>
<!-- end of generated class -->
";

        $for_scope .= $for_data . $for_success;
        fwrite($file, $c);
        fwrite($archivo, $for_scope);
echo 'clase generada';
exit();
        