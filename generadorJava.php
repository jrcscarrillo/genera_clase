<?php
include("resources/class.database.php");
$database = new Database();

if ($_REQUEST["f"] == "") {
    ?>

    <font face="Arial" size="3"><b>
        Java Class Generator
    </b>
    </font>

    <font face="Arial" size="2"><b>

        <form action="generadorJava.php" method="POST" name="FORMGEN">

            1) Select Table Name: 
            <br>

            <select name="tablename">

                <?php
                $database->OpenLink();
                $tablelist = mysql_list_tables($database->database, $database->link);
                while ($row = mysql_fetch_row($tablelist)) {
                    print "<option value=\"$row[0]\">$row[0]</option>";
                }
                ?>
            </select>

            <p>
                2) Type Class Name (ex. "test"): <br>
                <input type="text" name="classname" size="50" value="">
            <p>
                3) Type Name of Key Field:
                <br>
                <input type="text" name="keyname" value="" size="50">
                <br>
                <font size=1>
                (Name of key-field with type number with autoincrement!)
                </font>
            <p>
                4) Nombre objeto ($obj_clase): <br>
                <input type="text" name="objeto" size="50" value="">
            <p>


                <input type="submit" name="s1" value="Generate Class">
                <input type="hidden" name="f" value="formshowed">

        </form>

    </b>
    </font>
    <p>


        <?php
    } else {

// fill parameters from form
        $table = $_REQUEST["tablename"];
        $class = $_REQUEST["classname"];
        $activity = $_REQUEST["classname"]."Activity";
        $key = $_REQUEST["keyname"];
        $obj = $_REQUEST["objeto"];

        $dir = dirname(__FILE__);

        $filename = $dir . "/generated_classes/" . "class." . $class . ".java";
        $nombreArchivo = $dir . "/generated_classes/" . $class . ".xml";

// if file exists, then delete it
        if (file_exists($filename)) {
            unlink($filename);
        }
        if (file_exists($nombreArchivo)) {
            unlink($nombreArchivo);
        }

// open file in insert mode
        $file = fopen($filename, "w+");
        $archivo = fopen($nombreArchivo, "w+");
        $filedate = date("d.m.Y");

        $c = "";

        $c = "
package com.example.juancarrillo.coqueiros
/*
*
* -------------------------------------------------------
* CLASSNAME:        $class
* GENERATION DATE:  $filedate
* CLASS FILE:       $filename
* FOR MYSQL TABLE:  $table
* FOR MYSQL DB:     $database->database
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERADORJAVA
* from: >> www.voegeli.li >> (download for free!)
* modify: >> www.aurora-ec.net >> (download for free!)
* -------------------------------------------------------
*
*/
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.SnackBar;
import android.support.design.widget.SnackBar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import java.util.Date;
// **********************
// CLASS DECLARATION
// **********************

public class $activity extends AppComptActivity {

// **********************
// ATTRIBUTE DECLARATION
// **********************

";

        $sql = "SHOW COLUMNS FROM $table;";
        $database->query($sql);
        $result = $database->result;
        $for_scope = '$scope.' . $class . ' = {';
        $for_data = "data: {";
        $for_success = "{";
        $for_bind = "";
        $for_json = "";
        $for_insert = "";
        $for_while = "";
        $for_fetch = "";
        $for_unset = "";
        $for_db = "$" . "db_";
        $len_class = strlen($class);

        while ($row = mysql_fetch_row($result)) {
            $col = $row[0];

//if($col!=$key)
//{
            $for_scope .= '"' . $col . '": $scope.' . $col . ',';
            $for_scope .= "\r\n";
            $for_data .= '"' . $col . '": $scope.' . $class . '.' . $col . ',';
            $for_data .= "\r\n";
            $for_success .= '$scope.' . $class . '.' . $col . ' = data.' . $col . ';';
            $for_success .= "\r\n";
            $for_bind .= $for_db . $col . ", ";
            $for_json .= "$" . "_SESSION['" . $class . "']['" . $col . "']" . " = $" . "jsonString->" . $col . ";";
            $for_json .= "\r\n";
            $for_insert .= $obj . "->set" . $col . "($" . "_SESSION['" . $class . "']['" . $col . "']);";
            $for_insert .= "\r\n";
            $for_while .= $obj . "->" . $col . " = " . $for_db . $col . ";";
            $for_while .= "\r\n";
            $for_fetch .= "$" . "this->" . $col . " = " . $for_db . $col . ";";
            $for_fetch .= "\r\n";
            $for_fetch2 .= "$" . "_SESSION['" . $class . "']['" . $col . "'] = " . $obj . "->get" . $col . "();";
            $for_fetch2 .= "\r\n";
            $for_unset .= "unset($" . "_SESSION['" . $class . "']['" . $col . "']);";
            $for_unset .= "\r\n";
            $c.= "
public $$col;   // (normal Attribute)";

//} // endif
//"print "$col";
        } // endwhile

        $cdb = "$" . "db";
        $cdb2 = "db";
        $c.="

var $cdb; // Instance of class database

";

        $cthis = "$" . "this->";
        $thisdb = $cthis . $cdb2 . " = " . "new AuroraDB();";
        $thisj = "$" . "jsonString";
        $c.= "
// **********************
// CONSTRUCTOR METHOD
// **********************

function __construct()
{

$thisdb
}

function __destruct()
{


}

function genJson_$class($thisj)
{
$for_json
}

function genInsert_$class()
{
$for_insert
}
";

        $c.="
// **********************
// GETTER METHODS
// **********************

";
// GETTER
        $database->query($sql);
        $result = $database->result;
        while ($row = mysql_fetch_row($result)) {
            $col = $row[0];
            $mname = "get" . $col . "()";
            $mthis = "$" . "this->" . $col;
            $c.="
function $mname
{
return $mthis;
}
";
        }


        $c.="
// **********************
// SETTER METHODS
// **********************

";
// SETTER
        $database->query($sql);
        $result = $database->result;
        while ($row = mysql_fetch_row($result)) {
            $col = $row[0];
            $val = "$" . "val";
            $mname = "set" . $col . "($" . "val)";
            $mthis = "$" . "this->" . $col . " = ";
            $c.="
function $mname
{
$mthis $val;
}
";
        }

/**
 * @var $zeile0 Identifica la conexion a la base de datos que es un objeto instanciado de la clase aurora
 * @var $prepare Es el inicio de la declaracion prepare para la base de datos
 * @var $bind Aqui debe incluirse los argumentos de busqueda de la clase (tabla) que se utilizara frecuentemente
 * @var $bin_r Los campos seleccionados de la clase que estamos construyendo para ser presentado en el resultado
 * @var $execute Ejecutar la declaracion preparada de sql
 * @var $fetch Un if con una sentencia fetch para capturar una fila de una tabla
 */
        $sql = "$" . "sql = ";
        $id = "$" . "id";
        $thisdb = "$" . "this->" . "database";
        $thisdbquery = "$" . "this->" . "database->query($" . "sql" . ")";
        $result = "$" . "result = ";
        $row = "$" . "row";
        $result1 = "$" . "result";
        $cerrar = "$" . "db->close();";
        $res = "$" . "result = $" . "this->database->result;";
        $zeile0 = "$" . "db = $" . "this->db->aurora_connect();";
        $prepare = "$" . "stmt = $" . "db->prepare($" . "sql) or die(mysqli_error($" . "db));";
        $bind = "$" . 'stmt->bind_param("s", $id);';
        $for_bind = rtrim($for_bind, ", ");
        $bind_r = "$" . "stmt->bind_result(" . $for_bind . ");";
        $execute = "$" . "stmt->execute();";
        $fetch = "if ($" . "stmt->fetch()) {";
        $while = "while ($" . "stmt->fetch()) {";
        $c.="
// **********************
// SELECT METHOD / LOAD
// **********************

function select($id)
{

$zeile0
$sql \"SELECT * FROM $table WHERE $key = ?\";
$prepare
    $bind
        $bind_r
            $execute
                $fetch
                $for_fetch
";
        $c.="
            }
$cerrar
}
";
/**
 * @internal En esta variable estamos guardando el proceso de fetch de varias filas 
 */        
        $c.="
// *******************************
// SELECT METHOD / FETCH LOOP
// *******************************

function seleccionar($id)
{

$zeile0
$sql \"SELECT * FROM $table WHERE $key = ?\";
$prepare
    $bind
        $bind_r
            $execute
                $while
                $for_while
";

        $c.="
            }
$cerrar
}
";
        $c.="
// *******************************
// SELECT METHOD / FETCH LOOP
// *******************************

function recorrer($id)
{

$zeile0
$sql \"SELECT * FROM $table WHERE $key = ?\";
$prepare
    $bind
        $bind_r
            $execute
                $fetch
                $for_fetch2
";

        $c.="
            }
$cerrar
}
";
        $clean = $class . "($" . "jsonString)";
        $c.="
// *******************************
// UNSET METHOD / clean
// *******************************

function cleanSession_$clean
{

                $for_unset
";

        $c.="
            }
$cerrar
}
";

        $zeile1 = "$" . "sql" . " = \"DELETE FROM $table WHERE $key = ?\"";
        $c.="
// **********************
// DELETE
// **********************

function delete($id)
{
$zeile0
$zeile1;
$prepare
    $bind
        $execute
";
        $c.="
$cerrar
}
";


        $zeile1 = "$" . "this->$key = \"\"";
        $zeile2 = "INSERT INTO $table (";
        $zeile5 = ")";
        $zeile3 = "";
        $zeile4 = "";
        $zeile6 = "VALUES (";

        $sql = "SHOW COLUMNS FROM $table;";
        $database->query($sql);
        $result = $database->result;
        while ($row = mysql_fetch_row($result)) {
            $col = $row[0];

            if ($col != $key) {
                $zeile3.= "$col" . ",";
                $zeile4.= "'$" . "this->$col" . "',";
//$zeile3 = rtrim($zeile3);
//$zeile4 = rtrim($zeile4);
//$zeile3 = str_replace(",", " ", $zeile3);
//$zeile4 = str_replace(",", " ", $zeile4);
            }
        }

        $zeile3 = substr($zeile3, 0, -1);
        $zeile4 = substr($zeile4, 0, -1);
        $sql = "$" . "sql =";
        $zeile7 = "$" . "result = $" . "this->database->query($" . "sql);";
        $zeile8 = "$" . "row";
        $zeile9 = "$" . "result";
        $zeile10 = "$" . "this->$key = " . "mysql_insert_id($" . "this->database->link);";

        $c.="
// **********************
// INSERT
// **********************

function insert()
{
$zeile1; // clear key for autoincrement
$zeile0
$sql \"$zeile2 $zeile3 $zeile5 $zeile6 $zeile4 $zeile5\";
$prepare
$execute

$cerrar
}
";


// UPDATE ----------------------------------------

        $zeile1 = "$" . "this->$key = \"\"";
        $zeile2 = "UPDATE $table SET ";
        $zeile5 = ")";
        $zeile3 = "";
        $zeile4 = "";
        $zeile6 = "VALUES (";

        $upd = "";

        $sql = "SHOW COLUMNS FROM $table;";
        $database->query($sql);
        $result = $database->result;
        while ($row = mysql_fetch_row($result)) {
            $col = $row[0];

            if ($col != $key) {
                $zeile3.= "$col" . ",";
                $zeile4.= "$" . "this->$col" . ",";
                $upd.= "" . "$col = '$" . "this->$col',";
//$zeile3 = rtrim($zeile3);
//$zeile4 = rtrim($zeile4);
//$zeile3 = str_replace(",", " ", $zeile3);
//$zeile4 = str_replace(",", " ", $zeile4);
            }
        }

        $zeile3 = substr($zeile3, 0, -1);
        $zeile4 = substr($zeile4, 0, -1);
        $upd = substr($upd, 0, -1);
        $sql = "$" . "sql = \"";
        $zeile7 = "$" . "result = $" . "this->database->query($" . "sql)";
        $zeile8 = "$" . "row";
        $zeile9 = "$" . "result";
        $zeile10 = "$" . "this->$key = $" . "row->$key";
        $id = "$" . "id";
        $where = "WHERE " . "$key = ?";

        $c.="
// **********************
// UPDATE
// **********************

function update($id)
{

$zeile0

$sql $zeile2 $upd $where \";

$prepare
    $bind
        $execute

$cerrar
";














        $c.="
}
";










        $c.= "

} // class : end

?>
<!-- end of generated class -->
";

        $for_scope .= $for_data . $for_success;
        fwrite($file, $c);
        fwrite($archivo, $for_scope);

        print "
<font face=\"Arial\" size=\"3\"><b>
PHP MYSQL Class Generator
</b>
<p>
<font face=\"Arial\" size=\"2\"><b>
Class '$class' successfully generated as file '$filename'!
<p>
<a href=\"javascript:history.back();\">
back
</a>

</b></font>

";
        ?>
    <p>





        <?php
    } // endif
    ?>